// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId      String     @id @default(uuid())
  name        String
  role        Role       @default(Patient)
  email       String     @unique
  password    String
  gender      String
  age         Int
  patient     Patient?   @relation(fields: [patientId], references: [patientId])
  patientId   String
  physician   Physician? @relation(fields: [physicianId], references: [physicianId])
  physicianId String
}

model Patient {
  patientId      String          @id @default(uuid())
  name           String
  age            Int
  gender         String
  contactinfo    String
  MedicalHistory String
  role           Role            @default(Patient)
  appointments   Appointment[]
  medicalRecords MedicalRecord[]
  User           User[]
  Invoice        Invoice[]
}

model Physician {
  physicianId    String          @id @default(uuid())
  name           String
  specialization String
  contactinfo    String
  role           Role            @default(PCP)
  appointments   Appointment[]
  medicalRecords MedicalRecord[]
  User           User[]
  Invoice        Invoice[]
  Prescription   Prescription[]
}

model Appointment {
  appointmentId String    @id @default(uuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  patient       Patient   @relation(fields: [patientId], references: [patientId])
  patientId     String
  physician     Physician @relation(fields: [physicianId], references: [physicianId])
  physicianId   String
}

model MedicalRecord {
  recordId             String         @id @default(uuid())
  patient              Patient        @relation(fields: [patientId], references: [patientId])
  patientId            String
  physician            Physician      @relation(fields: [physicianId], references: [physicianId])
  physicianId          String
  date                 DateTime       @default(now())
  symptoms             String
  allergies            String
  currentSmokingStatus String
  alcholIntake         Boolean
  diagnosis            String
  treatmentPlan        String
  prescriptions        Prescription[]
  diagnoses            Diagnosis[]
  tests                Test[]
  treatments           Treatment[]
}

model Prescription {
  prescriptionId String        @id @default(uuid())
  title          String
  date           DateTime      @default(now())
  createdBy      Physician     @relation(fields: [physicianId], references: [physicianId])
  physicianId    String
  record         MedicalRecord @relation(fields: [recordId], references: [recordId])
  recordId       String
  medication     String
  dosage         String
  frequency      String
}

model Diagnosis {
  diagnosisId String        @id @default(uuid())
  record      MedicalRecord @relation(fields: [recordId], references: [recordId])
  recordId    String
  description String
  severity    String
}

model Test {
  testId     String        @id @default(uuid())
  record     MedicalRecord @relation(fields: [recordId], references: [recordId])
  recordId   String
  typeOfTest String
  result     String
  date       DateTime
}

model Treatment {
  treatmentId String        @id @default(uuid())
  record      MedicalRecord @relation(fields: [recordId], references: [recordId])
  recordId    String
  type        String
  description String
}

model Invoice {
  invoiceId   String    @id @default(uuid())
  patient     Patient   @relation(fields: [patientId], references: [patientId])
  patientId   String
  physician   Physician @relation(fields: [physicianId], references: [physicianId])
  physicianId String
  invoiceDate DateTime  @default(now())
  amount      Float
  description String
}

enum Role {
  Patient
  PCP
  Admin
}
